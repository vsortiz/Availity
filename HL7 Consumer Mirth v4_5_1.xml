<channel version="4.5.1">
  <id>80b6b08c-6b08-462c-aaff-897ceef93d51</id>
  <nextMetaDataId>3</nextMetaDataId>
  <name>HL7 Consumer</name>
  <description>Component #2 â€“ HL7 Consumer&#xd;
&#xd;
This channel consumed the HL7 messages from Component #1 (HL7 Producer).&#xd;
&#xd;
It ensures only messages from the Component #1 (HL7 Producer) are processed.&#xd;
&#xd;
It then retrieves the Component #1 channel name and patient demographics and creates a json files - one file per patient.</description>
  <revision>16</revision>
  <sourceConnector version="4.5.1">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.5.1">
      <pluginProperties/>
      <sourceConnectorProperties version="4.5.1">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
    </properties>
    <transformer version="4.5.1">
      <elements>
        <com.mirth.connect.plugins.mapper.MapperStep version="4.5.1">
          <name>varProducerChannelName</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <variable>varProducerChannelName</variable>
          <mapping>sourceMap.get(&apos;varChannelName&apos;);</mapping>
          <defaultValue></defaultValue>
          <replacements/>
          <scope>CHANNEL</scope>
        </com.mirth.connect.plugins.mapper.MapperStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>HL7V2</inboundDataType>
      <outboundDataType>HL7V2</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.5.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.5.1">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>false</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.5.1">
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.5.1">
          <splitType>MSH_Segment</splitType>
          <batchScript></batchScript>
        </batchProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.5.1">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
          <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.5.1">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
          <validateMessageControlId>true</validateMessageControlId>
          <originalMessageControlId>Destination_Encoded</originalMessageControlId>
          <originalIdMapVariable></originalIdMapVariable>
        </responseValidationProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.5.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.5.1">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>false</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.5.1">
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.5.1">
          <splitType>MSH_Segment</splitType>
          <batchScript></batchScript>
        </batchProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.5.1">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
          <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.5.1">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
          <validateMessageControlId>true</validateMessageControlId>
          <originalMessageControlId>Destination_Encoded</originalMessageControlId>
          <originalIdMapVariable></originalIdMapVariable>
        </responseValidationProperties>
      </outboundProperties>
    </transformer>
    <filter version="4.5.1">
      <elements>
        <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="4.5.1">
          <name>Accept message if &quot;sourceMap.get(&apos;varChannelName&apos;).toUpperCase().trim()&quot; equals &apos;HL7 PRODUCER&apos;</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <field>sourceMap.get(&apos;varChannelName&apos;).toUpperCase().trim()</field>
          <condition>EQUALS</condition>
          <values>
            <string>&apos;HL7 PRODUCER&apos;</string>
          </values>
        </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
      </elements>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="4.5.1">
      <metaDataId>2</metaDataId>
      <name>Write JSON files</name>
      <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="4.5.1">
        <pluginProperties/>
        <destinationConnectorProperties version="4.5.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <scheme>FILE</scheme>
        <host>C:/temp/availity/out</host>
        <outputPattern>${date.get(&apos;yyyy-M-d H.m.s&apos;)}_${message.messageId}.json</outputPattern>
        <anonymous>true</anonymous>
        <username>anonymous</username>
        <password>anonymous</password>
        <timeout>10000</timeout>
        <keepConnectionOpen>false</keepConnectionOpen>
        <maxIdleTime>0</maxIdleTime>
        <secure>true</secure>
        <passive>true</passive>
        <validateConnection>true</validateConnection>
        <outputAppend>true</outputAppend>
        <errorOnExists>false</errorOnExists>
        <temporary>false</temporary>
        <binary>false</binary>
        <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        <template>${message.encodedData}</template>
      </properties>
      <transformer version="4.5.1">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.5.1">
            <name>Get Patient Info</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>tmp[&apos;patient&apos;][&apos;pat_id&apos;] 	=  msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString();
tmp[&apos;patient&apos;][&apos;pat_fname&apos;]	=  msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
tmp[&apos;patient&apos;][&apos;pat_lname&apos;]	=  msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
tmp[&apos;patient&apos;][&apos;pat_dob&apos;]	=  msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();
msg[&apos;row&apos;][&apos;pat_gender&apos;]		=  msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString();
msg[&apos;row&apos;][&apos;pat_street&apos;]		=  msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].toString();
msg[&apos;row&apos;][&apos;pat_city&apos;]		=  msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;].toString();
msg[&apos;row&apos;][&apos;pat_state&apos;]		=  msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.4&apos;].toString();
msg[&apos;row&apos;][&apos;pat_zip&apos;]		=  msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString();</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.5.1">
            <name>Get Channel Name</name>
            <sequenceNumber>1</sequenceNumber>
            <enabled>true</enabled>
            <script>tmp[&apos;channel_name&apos;] = $(&apos;varProducerChannelName&apos;);</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64">TVNIfF5+XCZ8TnRpZXJwcmlzZXxOdGllcnByaXNlIENsaW5pY3xIZWFsdGhtYXRpY3MgRUhSfEhlYWx0aG1hdGljcyBDbGluaWN8MjAxOTA0MjMxMTM5MTB8fEFEVF5BMDh8ODg5OS0zOXxQfDIuM3x8fE5FfE5FCkVWTnxBMDh8MjAxOTA0MjMxMTM5MTB8fDAxClBJRHwxfHwxNTF8fEJvbmReVGlueXx8MTk5OTA3MjN8TXx8fDgzODggU2VjcmV0IEFnZW50IFdheV5eUmFsZWlnaF5OQ14yNzY3N3x8fHx8fHwxNTF8fHx8fHx8fHx8fHxOCk5LMXwxfEJvbmReTGFkeV5UfFNwb3VzZV5TcG91c2V8MDA3IFNvaG8gTGFuZV5eQ2FyeV5OQ14yNzUxMXwoOTE5KTAwNy0wMDA3Xl5QSF5eXjkxOV4wMDcwMDA3ClBWMXwxfFJ8fHx8fE1hbm5pbmdeTWFubmluZ15UZXJyeV5eXl5eXiY3NjU0MzIxJlVQSU58fHx8fHx8fHxOfHxBCkdUMXwxfDE1MHxCb25kXkphbWVzXl4wMDd8fDAwNyBTb2hvIExhbmVeXkNhcnleTkNeMjc1MTF8KDkxOSkwMDctMDAwN15eUEheXl45MTleMDA3MDAwN34oNzc3KTcwNy0wNzA3Xl5DUF5eXjc3N143MDcwNzA3fl5ORVReWC40MDBeMDA3QEJyaXRpc2hTZWNyZXRTZXJ2aWNlLmNvbXwoOTE5KTg1MS02MTc3IFgwMDdeXl5eXjkxOV44NTE2MTc3XjAwN3wxOTc3MDkyMHxNfHx8MDA3LTAwLTAwMDd8fHx8fDI5ODggRW5nbGFuZCBEcml2ZV5eTG9uZG9uXkRDfHx8Rnx8fHx8fHx8fHxNfHx8fHx8fHx8fHx8fHx8fHx8fHx8QnJpdGlzaCBTZWNyZXQgU2VydmljZQo=</inboundTemplate>
        <outboundTemplate encoding="base64">ewoicGF0aWVudCI6CnsKInBhdF9pZCI6ICIiLAoicGF0X2ZuYW1lIjogIiIsCiJwYXRfbG5hbWUiIDogIiIsCiJwYXRfZG9iIjoiIgp9LAoiY2hhbm5lbF9uYW1lIjogIiIKfQ==</outboundTemplate>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.5.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.5.1">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>false</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.5.1">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.5.1">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.5.1">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.5.1">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>true</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.5.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.5.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="4.5.1">
        <elements/>
        <inboundDataType>DELIMITED</inboundDataType>
        <outboundDataType>DELIMITED</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="4.5.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="4.5.1">
            <columnDelimiter>,</columnDelimiter>
            <recordDelimiter>\n</recordDelimiter>
            <quoteToken>&quot;</quoteToken>
            <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
            <quoteEscapeToken>\</quoteEscapeToken>
            <numberedRows>false</numberedRows>
            <ignoreCR>true</ignoreCR>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="4.5.1">
            <columnDelimiter>,</columnDelimiter>
            <recordDelimiter>\n</recordDelimiter>
            <quoteToken>&quot;</quoteToken>
            <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
            <quoteEscapeToken>\</quoteEscapeToken>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="4.5.1">
            <splitType>Record</splitType>
            <batchSkipRecords>0</batchSkipRecords>
            <batchMessageDelimiter></batchMessageDelimiter>
            <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
            <batchGroupingColumn></batchGroupingColumn>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="4.5.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="4.5.1">
            <columnDelimiter>,</columnDelimiter>
            <recordDelimiter>\n</recordDelimiter>
            <quoteToken>&quot;</quoteToken>
            <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
            <quoteEscapeToken>\</quoteEscapeToken>
            <numberedRows>false</numberedRows>
            <ignoreCR>true</ignoreCR>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="4.5.1">
            <columnDelimiter>,</columnDelimiter>
            <recordDelimiter>\n</recordDelimiter>
            <quoteToken>&quot;</quoteToken>
            <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
            <quoteEscapeToken>\</quoteEscapeToken>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="4.5.1">
            <splitType>Record</splitType>
            <batchSkipRecords>0</batchSkipRecords>
            <batchMessageDelimiter></batchMessageDelimiter>
            <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
            <batchGroupingColumn></batchGroupingColumn>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="4.5.1">
        <elements/>
      </filter>
      <transportName>File Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="4.5.1">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <encryptAttachments>false</encryptAttachments>
    <encryptCustomMetaData>false</encryptCustomMetaData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="4.5.1">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1728594324159</time>
        <timezone>America/New_York</timezone>
      </lastModified>
      <pruningSettings>
        <pruneMetaDataDays>14</pruneMetaDataDays>
        <archiveEnabled>true</archiveEnabled>
        <pruneErroredMessages>false</pruneErroredMessages>
      </pruningSettings>
      <userId>1</userId>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="4.5.1">
        <id>9decf3a4-57e0-4e83-9bca-09e9a4515ae2</id>
        <name>Helper Methods</name>
        <revision>1</revision>
        <lastModified>
          <time>1723136356738</time>
          <timezone>America/New_York</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>4f8dc56b-0a8e-47f7-a605-c245fce11d18</string>
          <string>04d7853f-994b-4d74-b9e8-80daec1a619e</string>
          <string>bf284526-9ed6-4a2f-a8cf-49a696145583</string>
          <string>c0c908b4-eb77-4c35-b4d3-e72f8f9e00d2</string>
          <string>fb28280d-aad0-409a-8dff-a01d7b79f5df</string>
          <string>11bea737-bb4c-47a8-9cb4-672cbabe9a11</string>
          <string>4373a9c9-a12f-48ea-a2f0-37ac89017f35</string>
          <string>adec87b6-e358-4f17-8687-7046585e3b3e</string>
          <string>f32a0c69-626f-40fb-9d25-e1fefdd91221</string>
          <string>14632a1c-92d9-4f30-b753-3a1db1e601bf</string>
          <string>e09fc803-f018-4331-8563-58590d115441</string>
          <string>51de2411-35e5-484b-a299-1bf13388ec05</string>
          <string>78b3414b-c0a5-4390-bb80-ae97efd86151</string>
          <string>ad2eb69f-e8c5-431a-a322-9454cd8070be</string>
          <string>319408c0-6fc7-402d-b4ce-94ea6cc4e8d8</string>
          <string>f6a98dd8-0dcc-4b46-a7cd-26b8db456374</string>
          <string>343caadc-2d61-4b64-9f33-61766de2eb33</string>
          <string>78e930cb-a789-411b-b5f3-1d1f7b585150</string>
          <string>f75dd61b-5d2a-4f8e-991c-bbfdf556bf1e</string>
          <string>6f161207-a33f-42a4-a417-1f0408ed0616</string>
          <string>6563a6c5-7e23-4057-8622-4423eca25c10</string>
          <string>53922ca2-c3fa-4962-8c26-6f9fabdc0447</string>
          <string>af87bf8b-29ec-49a9-8540-a530125d72fb</string>
          <string>163062bf-2348-4cbb-a2ff-e1dfcdc927b4</string>
          <string>440603b7-79bd-465b-8d67-84c0eab7c5c1</string>
          <string>d92c26f7-a147-446d-aafa-d6b0aaff5b11</string>
          <string>a16fc5fe-9aeb-416e-9f4c-d27afbbefb26</string>
          <string>0a7de039-6675-4eed-b9cb-f4c7473410b1</string>
          <string>66feb325-8cd4-4276-8a2f-8201d0c89cbd</string>
          <string>ff53df12-cd76-4dbb-8da2-303f51833b46</string>
          <string>b01d95f1-138b-4237-a092-df48f653c2b2</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.5.1">
            <id>04c004ba-d816-4d64-ba0a-e395db3fdf41</id>
            <name>Add Dash to SS</name>
            <revision>1</revision>
            <lastModified>
              <time>1723136358251</time>
              <timezone>America/New_York</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Add dash to Social Security
	
	@param {String} arg1 - Zip Code
	@return {String} return formatted zip code with dash
*/
function AddDashToSS(inSS) {
	
	if (inSS.length &gt; 0)
	{
	   return inSS.slice(0,3) + &quot;-&quot; + inSS.slice(3,5) + &quot;-&quot; + inSS.slice(5,9);
	
	} 

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.1">
            <id>6e5cc7a1-93aa-4a69-8e41-0c3044a64c68</id>
            <name>Add Dash To Zip Code</name>
            <revision>1</revision>
            <lastModified>
              <time>1723136358814</time>
              <timezone>America/New_York</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	If the US zip code is larger than 5 digits, then add dash before
	the 4 digit add-on code.
	
	@param {String} arg1 - Zip Code
	@return {String} return formatted zip code with dash
*/
function AddDashToZipCode(inZip) {
	
	if (inZip.length &gt; 5)
	{
	  return inZip.slice(0,5) + &quot;-&quot; + inZip.slice(5,9);
	} 
	else if (inZip.length == 5)
	{
	   return inZip;
	}

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.1">
            <id>415f1490-c92b-4be3-a74f-90e26b124968</id>
            <name>Checks to see if SFTP file Exists</name>
            <revision>1</revision>
            <lastModified>
              <time>1723136357350</time>
              <timezone>America/New_York</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Connects to Sentry SFTP and checks if file exists.
	
	@param {String} inFilePath - full path of file to check.
	@param {String} inFolder path - path of folder to check (ex:&apos;/test/his_provider&apos;)
	@return {String} return true/false
*/
function CheckIfFTPFileExists(inFilePath, inFolderPath) 
{
	
//
//Connect to SFTP and check if today&apos;s provider file exists (inFilePath)...
//if it does NOT, then set flag ($first) to add headers when destination writing to file.FIXME:
//if it does, then set flag ($first) to not add header when destination writes to file.
//
//http://www.jcraft.com/jsch/examples/Sftp.java.html
//http://hl7starterkit.com/mirth-connecting-to-sftp-with-jsch-java-class/
//http://epaul.github.io/jsch-documentation/simple.javadoc/
//https://docs.oracle.com/javase/7/docs/api/java/io/RandomAccessFile.html#RandomAccessFile(java.io.File,%20java.lang.String)

importPackage(com.jcraft.jsch);
importPackage(java.io);
importPackage(java.lang);

//create object.
var jsch = new JSch();

//add identity -  JSch expects the private key to be in OpenSSH format.
jsch.addIdentity(&quot;c:\\certs\\GibsonSentryKeyOpenSSH&quot;, &quot;G1bs0nI7&quot;); 
jsch.setConfig(&apos;StrictHostKeyChecking&apos;,&apos;no&apos;);

//get session
var session = jsch.getSession(&apos;gibson_community_cpsi&apos;,&apos;Sftp.sentryds.com&apos;,22);
session.setTimeout(20000);
session.connect();

var channel = session.openChannel(&apos;sftp&apos;);
channel.connect();
//logger.info(&apos;Connected to SFTP: &apos;);
//logger.info(&apos;Home Directory: &apos; + channel.getHome());

//Folder Name Where File Is Located If It Exists...
var folderPath = channel.getHome() + inFolderPath;
channel.cd(folderPath); 

//now we can form full file path
var path = folderPath + &quot;/&quot; +  inFilePath;

var channelSftp = channel; //ChannelSftp object
var outFirstTimeFileIsRun;

try {
	var attrs = channelSftp.lstat(path); //SftpATTRS object
     attrs = channelSftp.stat(path);
     //logger.debug(path + &quot; found&quot;);
    	outFirstTimeFileIsRun = &apos;false&apos;;
} catch (err) {
     //logger.debug(path + &quot; not found&quot;);
    	outFirstTimeFileIsRun = &apos;true&apos;;
}
    
//the exit status returned by the remote command, or -1, if the command not yet terminated (or this channel type has no command).
//logger.info(&apos;get exit status: &apos; + channel.getExitStatus());
channel.exit();
//logger.info(&apos;exit sftp dir&apos;);
session.disconnect();
//logger.info(&apos;session completed!&apos;);

return outFirstTimeFileIsRun;
}

</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.1">
            <id>0de897e1-9d68-40e5-8858-0ca05bb591ee</id>
            <name>Convert Patient Class</name>
            <revision>1</revision>
            <lastModified>
              <time>1723136359029</time>
              <timezone>America/New_York</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Maps the database patient class to the Sentry equivalent.
	
	@param {String} inClassType - O/P, I/P, E/R, 1-5; database patient class
	@return {String} return Sentry patient class
*/
function ConvertPatientClass(inClassType) {
	//ip = outpatient: patient type of 1,4,5
	//op = inpatient: patient type of 2,3
	
	try
	{
		if (inClassType.trim().toUpperCase() == &quot;O/P&quot; ||
		    inClassType.trim() == &quot;2&quot; ||
		    inClassType.trim() == &quot;3&quot; 
		    )
		{
			return &quot;O&quot;;
		}
		if (inClassType.trim().toUpperCase() == &quot;I/P&quot; ||
		    inClassType.trim() == &quot;1&quot; ||
		    inClassType.trim() == &quot;4&quot; ||
		    inClassType.trim() == &quot;5&quot;
		    )
		{
			return &quot;I&quot;;
		}
		if (inClassType.trim().toUpperCase() == &quot;E/R&quot;)
		{
			return &quot;E&quot;;
		}
		return &quot;&quot;;
	}
	catch(err)
	{
		//if there&apos;s an error, just return nothing.
		return &quot;&quot;;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.1">
            <id>87400c67-dc2c-4843-ab4b-a7b65f00e535</id>
            <name>Convert Patient Gender</name>
            <revision>1</revision>
            <lastModified>
              <time>1723136358707</time>
              <timezone>America/New_York</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	The CPSI db has U, f, m, F, M, blanks. Sentry needs F,M,U.
	
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function ConvertGender(inGender) {
	// TODO: Enter code here
	//db  has U, f, m, F, M, blanks
	try{
		if (toUpperCase(inGender.toString().trim()) == &quot;F&quot;)
		{
			return &quot;F&quot;;
		}
		else if (toUpperCase(inGender.toString().trim()) == &quot;M&quot;)
		{
			return &quot;M&quot;;
		}
		else if (toUpperCase(inGender.toString().trim()) == &quot;U&quot;)
		{
			return &quot;U&quot;;
		}
		else 
		{
			return &quot;U&quot;;
		}
		//if all else fails...
		return &quot;U&quot;;
	}
	catch(err)
	{	
		//if  there&apos;s an error...
		return &quot;U&quot;;
	}
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.1">
            <id>60ca73ea-9476-4c46-b32f-dcbbaf27b2a6</id>
            <name>Format a Phone Number</name>
            <revision>1</revision>
            <lastModified>
              <time>1723136358493</time>
              <timezone>America/New_York</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Function takes an unformatted phone # (1231230000) and
	returns formatted # (123) 123-0000
	
	@param {String} inPhoneNumber - ex: 1231230000
	@return {String} return formatted # (123) 123-0000
*/
function FormatPhoneNumber(inPhoneNumber) 
{
	try
	{
		if (inPhoneNumber.toString().trim() != &quot;&quot;)
		{
			return inPhoneNumber.substr(0, 3) + &apos;-&apos; + inPhoneNumber.substr(3, 3) + &apos;-&apos; + inPhoneNumber.substr(6,4)
		
		}
	}
	catch(err)
	{
		return inPhoneNumber;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.1">
            <id>cd052bf5-82c3-4499-a1fe-e52ca60d099e</id>
            <name>Patient Name</name>
            <revision>1</revision>
            <lastModified>
              <time>1723136359244</time>
              <timezone>America/New_York</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	CPSI database has Patient in full name field.
	Ex: &quot;LAST FIRST MI&quot;.

	@param {String} strPatientFullName - arg1 description
	@return {String} return Patient last name
*/
function GetPatientLastName(strPatientFullName)
{
	//logger.debug(&quot;Getting pat last name: &quot; + strPatientFullName)
	
	//split up Patient name
	var arrPatientFullName = strPatientFullName.split(&quot; &quot;);

	//logger.debug(&quot;Name length: &quot; + arrPatientFullName.length);
	//logger.debug(&quot;Returning patient last name: &quot; +  arrPatientFullName[0]);
	
	//last name will be in first (0) array position
	return arrPatientFullName[0];
}

function GetPatientFirstName(strPatientFullName)
{
	//split up Patient name
	var arrPatientFullName = strPatientFullName.split(&quot; &quot;);
	
	//first will be in second (1) array position
	return arrPatientFullName[1];
}


function GetPatientMiddleName(strPatientFullName)
{
	try
	{
		//split up Patient name
		var arrPatientFullName = strPatientFullName.split(&quot; &quot;);


		//middle initial will be in last (2) array position
		//there may not be a MI...only return if MI present
		if (arrPatientFullName.length == 3)
		{
			return arrPatientFullName[2];
		}
		return &quot;&quot;;
	}
	catch(err)
	{
		//all fails, just send in whatever was sent.
		return &quot;&quot;;
		
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.1">
            <id>395925fa-eb3d-4600-b969-03ea37ed68f0</id>
            <name>Provider Name</name>
            <revision>1</revision>
            <lastModified>
              <time>1723136357803</time>
              <timezone>America/New_York</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	CPSI database has provider in full name field.
	Ex: &quot;LAST FIRST MI&quot;.

	@param {String} strProvFullName - arg1 description
	@return {String} return provider last name
*/
function GetProviderLastName(strProvFullName)
{
	//logger.debug(&quot;Getting prov last name: &quot; + strProvFullName)

	try
	{
		//split up provider name
		var arrProviderFullName = strProvFullName.split(&quot; &quot;);
	
		//logger.debug(&quot;Name length: &quot; + arrProviderFullName.length);
		//logger.debug(&quot;Returning prov last name: &quot; +  arrProviderFullName[0]);
		
		//last name will be in first (0) array position
		return arrProviderFullName[0];
	}
	catch(err)
	{
		return &quot;&quot;;
	}
}

function GetProviderFirstName(strProvFullName)
{
	try
	{
		//split up provider name
		var arrProviderFullName = strProvFullName.split(&quot; &quot;);
		
		//first will be in second (1) array position
		return arrProviderFullName[1];
	}
	catch(err)
	{
		return &quot;&quot;;
	}
}


function GetProviderMiddleInitial(strProvFullName)
{
	//logger.debug(&quot;getting provider middle name&quot;);
	
	try
	{
		//split up provider name
		var arrProviderFullName = strProvFullName.split(&quot; &quot;);
		
		//middle initial will be in last (2) array position
		//there may not be a MI...only return if MI present
		if (arrProviderFullName.length == 3)
		{
			return arrProviderFullName[2];
		}
		return &quot;&quot;;
	}
	catch(err)
	{
		return &quot;&quot;;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.1">
            <id>2cf2c227-d7da-4e4d-94bf-967890585b31</id>
            <name>Remove Date/Time from Date</name>
            <revision>1</revision>
            <lastModified>
              <time>1723136356763</time>
              <timezone>America/New_York</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Removes the time from the date.
	EX: 2016-08-10 20:16:00.0 to 2016-08-10
	
	@param {String} inDateTime - The date with timestamp
	@return {String} return description
*/
function RemoveTimeFromDate(inDateTime) 
{
	// a space separates the date and time
	if (inDateTime.toString().trim().length &gt; 0)
	 {
	  var arrDateTime = inDateTime.split(&quot; &quot;);
	  return  arrDateTime[0];
	 }
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
    <channelTags>
      <channelTag>
        <id>0278935b-4d9c-48e4-a8ef-9321d2a57fba</id>
        <name>Availity</name>
        <channelIds>
          <string>470d020f-2c3c-415c-b7b2-f8e774dcd457</string>
          <string>80b6b08c-6b08-462c-aaff-897ceef93d51</string>
        </channelIds>
        <backgroundColor>
          <red>255</red>
          <green>0</green>
          <blue>0</blue>
          <alpha>255</alpha>
        </backgroundColor>
      </channelTag>
    </channelTags>
  </exportData>
</channel>